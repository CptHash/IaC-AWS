AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-cognito-example
  Sample SAM app using Amazon Cognito for API authentication
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  CognitoUserEmail:
    Description: Email address of the created user
    Type: String
  APIStageName:
    Default: api
    Description: StageName of API Gateway deployment
    Type: String

Resources:
  BillingAlertOne:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref BillingAlertTopic
      AlarmDescription: "Billing Alert for $10"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Currency
          Value: USD
      EvaluationPeriods: 1
      MetricName: EstimatedCharges
      Namespace: AWS/Billing
      Period: 21600
      TreatMissingData: breaching
      Statistic: Maximum
      Threshold: 10

  BillingAlertTopic:
    Type: AWS::SNS::Topic

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref getAllArticlesFunctionNoAuth]]
      RetentionInDays: 7

  getAllArticlesFunctionNoAuth:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-articles.getAllArticlesHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Items:
          Type: Api
          Properties:
            Path: /no-auth
            Method: GET
  getAllArticlesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-articles.getAllArticlesHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Items:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: CognitoAuthorizer
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-article-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-article-by-id.getByIdHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Items:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: CognitoAuthorizer
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-article.js
  putArticleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-article.putArticleHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Items:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: CognitoAuthorizer
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: user-pool-client
      UserPoolId:
        Ref: UserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      GenerateSecret: false

  AppApi:
    DependsOn: UserPool
    Type: AWS::Serverless::Api
    Properties:
      Name: HelloWorldAPI
      StageName: !Ref APIStageName
      Cors: "'*'"
      Auth:
        Authorizers:
            CognitoAuthorizer:
              UserPoolArn: !GetAtt "UserPool.Arn"

  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      # SSESpecification:
      #   KMSMasterKeyId: !Ref DynamoDbTableKmsKey
      #   SSEEnabled: true
      #   SSEType: KMS
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  HelloWorldApi:
    Description: "Get all without auth"
    Value: !Sub "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/${APIStageName}/no-auth"
  HelloWorldWithAuthApi:
    Description: "Get all with auth"
    Value: !Sub "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/${APIStageName}/"
  UserPoolId:
    Description: "ID of the Cognito User Pool"
    Value: !Ref UserPool
  CognitoClientId:
    Description: "ID of the Cognito User Pool Client"
    Value: !Ref UserPoolClient